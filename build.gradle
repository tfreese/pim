// Tasks im SubModul ausführen: gradle MODUL:clean build

subprojects {
    apply plugin: 'java'
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$version_springBoot"
        }

        dependencies {
            dependency "commons-cli:commons-cli:$version_commonsCli"
            dependency "commons-io:commons-io:$version_commonsIo"
            dependency "org.apache.commons:commons-collections4:$version_commonsCollections"
            dependency "org.jsoup:jsoup:$version_jsoup"
        }
    }
}

project("pim-common") {
    apply plugin: "java-library"
    description = "Common Components for PIM"
    dependencies {
        api("commons-cli:commons-cli")
        api("commons-io:commons-io")
        api("javax.activation:javax.activation-api")
        api("org.apache.commons:commons-collections4")
        api("org.apache.commons:commons-lang3")
        api("org.springframework.boot:spring-boot-starter-json")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
}

project("pim-server") {
    apply plugin: "java-library"
    apply plugin: "org.springframework.boot"
    description = "Server for PIM"
    dependencies {
        implementation(project(":pim-common"))

        api("org.springframework.boot:spring-boot-starter-web")
        implementation("de.freese.spring:spring-autoconfigure-hsqldbserver:$project.version")

        implementation("org.flywaydb:flyway-core")
        implementation("org.hsqldb:hsqldb")
        implementation("org.springframework.boot:spring-boot-starter-jdbc")
        implementation("org.springframework.boot:spring-boot-starter-mail") {
            exclude group: "javax.activation", module: "activation"
        }

        runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")
        runtimeOnly("org.xerial:sqlite-jdbc")

        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.junit.platform:junit-platform-runner")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation("org.jsoup:jsoup")
    }

    //Für Placeholder in *.properties
    ext.artifactId = project.name

    // Start: gradle bootRun
    bootJar {
        mainClass = "de.freese.pim.server.PIMServerApplication"
    }
    
    // gradle bootRun --args="--spring.profiles.active=Server,HsqldbEmbeddedServer --server.port=65111"
    bootRun {
        args = [
        	  "--spring.profiles.active=Server,HsqldbEmbeddedServer"
        	, "--server.port=65111"
        ]
	}

    // bootRun benutzt sonst nur die Resourcen in src/main/resources
    processResources {
        //        inputs.property('project.artifactId', project.name)
        //        inputs.property('project.description', project.description)
        //        inputs.property('project.version', project.version)

        //filesMatching('**/*.properties')
        filesMatching("application-Server.properties")
                {
                    expand(project.properties)
                    //            expand ('@project.artifactId': project.name,
                    //                '@project.description': project.description,
                    //                '@project.version': project.version
                    //            )

                    //            expand project.artifactId: project.name
                    //            expand project.description: project.description
                    //            expand project.version: project.version
                }
    }
}

project("pim-clientfx") {
    apply plugin: "java-library"
    apply plugin: "org.springframework.boot"
    apply plugin: "org.openjfx.javafxplugin"
    description = "GUI for PIM"
    test.enabled = false
    dependencies {
        implementation(project(":pim-common"))
        implementation(project(":pim-server"))

        javafx {
            version = "15"
            modules = ["javafx.controls", "javafx.fxml", "javafx.web"]
        }

        //implementation("org.openjfx:javafx-controls")
        //implementation("org.openjfx:javafx-fxml")
        //implementation("org.openjfx:javafx-web")
    }

    //Für Placeholder in *.properties
    ext.artifactId = project.name

    bootJar {
        mainClass = "de.freese.pim.gui.PIMApplication"
    }

    // bootRun benutzt sonst nur die Resourcen in src/main/resources
    processResources {
        //filesMatching("**/*.properties")
        filesMatching("application-ClientEmbeddedServer.properties")
            {
                expand(project.properties)
            }
    }
}
