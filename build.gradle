// Tasks im SubModul ausführen: gradle MODUL:clean build
buildscript {
    // Für Plugins
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal() // maven { url "https://plugins.gradle.org/m2"; name "plugins-gradle" }
    }

    dependencies {
        classpath "de.freese.gradle:gradle-plugins:0.0.1-SNAPSHOT"
        classpath "io.spring.gradle:dependency-management-plugin:$version_springDependencyManagement"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$version_springBootGradlePlugin"
        classpath "org.openjfx:javafx-plugin:$version_javafxPlugin"
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "de.freese.gradle.plugin.conventions"

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$version_springBoot"
        }

        dependencies {
            dependency "commons-cli:commons-cli:$version_commonsCli"
            dependency "org.jsoup:jsoup:$version_jsoup"
        }
    }
}

project("pim-core") {
    apply plugin: "java-library"
    description = "Core Components for PIM"
    dependencies {
        api("commons-cli:commons-cli")
        api("org.flywaydb:flyway-core")
        api("org.hsqldb:hsqldb")
        api("org.springframework.boot:spring-boot-starter-jdbc")
        api("org.springframework.boot:spring-boot-starter-json")
        api("org.springframework.boot:spring-boot-starter-mail")
        api("org.xerial:sqlite-jdbc")

        testImplementation("org.jsoup:jsoup")
        testImplementation("org.junit.platform:junit-platform-runner")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
}

project("pim-server") {
    apply plugin: "java-library"
    apply plugin: "org.springframework.boot"
    description = "Server for PIM"
    dependencies {
        implementation(project(":pim-core"))

        api("org.springframework.boot:spring-boot-starter-web")

        runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")

        testImplementation("org.junit.platform:junit-platform-runner")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // The archive name. If the name has not been explicitly set, the pattern for the name is:
    // [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    // archiveFileName = "my-boot.jar"
    springBoot {
        mainClass = "de.freese.pim.server.PimServerApplication"
    }
    // gradle bootRun --args="--spring.profiles.active=Server,HsqldbEmbeddedServer --server.port=65111"
    bootRun {
        args = [
                "--spring.profiles.active=Server,HsqldbEmbeddedServer"
                , "--server.port=65111"
        ]
    }

    //Für Platzhalter in application.properties
    ext.artifactId = project.name

    processResources {
        filesMatching("application-Server.properties") {
            filteringCharset = "UTF-8"

            // Bei Problemen müssen die Platzhalter escaped werden: \${...}
            expand(project.properties)
        }
    }
}

project("pim-clientfx") {
    apply plugin: "java-library"
    apply plugin: "org.springframework.boot"
    apply plugin: "org.openjfx.javafxplugin"
    description = "GUI for PIM"
    test.enabled = false
    dependencies {
        implementation(project(":pim-core"))
        implementation(project(":pim-server"))

        javafx {
            version = "$version_javafxBase"
            modules = ["javafx.controls", "javafx.fxml", "javafx.web"]
        }
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // The archive name. If the name has not been explicitly set, the pattern for the name is:
    // [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    // archiveFileName = "test2-boot.jar"
    springBoot {
        mainClass = "de.freese.pim.gui.PimClientLauncher"
    }
    // gradle bootRun --args="--spring.profiles.active=ClientStandalone"
    bootRun {
        args = [
                "--spring.profiles.active=ClientRest"
        ]
    }

    //Für Platzhalter in application.properties
    ext.artifactId = project.name

    processResources {
        filesMatching("application-ClientEmbeddedServer.properties") {
            filteringCharset = "UTF-8"

            // Bei Problemen müssen die Platzhalter escaped werden: \${...}
            expand(project.properties)
        }
    }
}
