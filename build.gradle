// Execute Tasks in SubModule: gradle MODUL:clean build
plugins {
    id "de.freese.gradle.conventions" version "$version_myConventionPlugin" apply false
    id "io.spring.dependency-management" version "$version_springDependencyManagement" apply false
    id "org.openjfx.javafxplugin" version "$version_javafxPlugin" apply false
    id "org.springframework.boot" version "$version_springBoot" apply false
    id "name.remal.sonarlint" version "$version_nameRemalSonarlint" apply false
    id "de.freese.gradle.sonarlint-conventions" version "$version_myConventionPlugin" apply false
}

subprojects {
    apply plugin: "base"
    apply plugin: "de.freese.gradle.conventions"
    apply plugin: "io.spring.dependency-management"
    // apply plugin: "name.remal.sonarlint"
    // apply plugin: "de.freese.gradle.sonarlint-conventions"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:$version_springBoot")
        }

        dependencies {
            dependency("commons-cli:commons-cli:$version_commonsCli")
            dependency("org.jsoup:jsoup:$version_jsoup")
        }
    }

    afterEvaluate { project ->
        if (project.plugins.hasPlugin("java") || project.plugins.hasPlugin("java-library") || project.plugins.hasPlugin("application")) {
            dependencies {
                testImplementation("org.junit.jupiter:junit-jupiter")
                testRuntimeOnly("org.junit.platform:junit-platform-launcher")
            }
        }
    }
}

project("pim-core") {
    apply plugin: "java-library"
    description = "Core Components for PIM"
    dependencies {
        api("commons-cli:commons-cli")
        api("org.hsqldb:hsqldb")
        api("org.springframework.boot:spring-boot-starter-jdbc")
        api("org.springframework.boot:spring-boot-starter-json")
        api("org.springframework.boot:spring-boot-starter-mail")
        api("org.xerial:sqlite-jdbc")

        testImplementation("org.jsoup:jsoup")
        testImplementation("org.junit.platform:junit-platform-runner")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
}

project("pim-server") {
    apply plugin: "java-library"
    apply plugin: "org.springframework.boot"
    description = "Server for PIM"
    dependencies {
        implementation(project(":pim-core"))

        api("org.springframework.boot:spring-boot-starter-web")

        runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // The archive name. If the name has not been explicitly set, the pattern for the name is:
    // [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    // archiveFileName = "my-boot.jar"
    springBoot {
        mainClass = "de.freese.pim.server.PimServerApplication"
    }
    // gradle bootRun --args="--spring.profiles.active=Server,HsqldbEmbeddedServer --server.port=65111"
    bootRun {
        args = [
                "--spring.profiles.active=Server,HsqldbEmbeddedServer"
                , "--server.port=65111"
        ]
    }

    // For Placeholder in application.properties/application.yml
    ext.artifactId = project.name

    processResources {
        filesMatching("application-Server.properties") {
            filteringCharset = "UTF-8"

            // During Problems escape Placeholder: \${...}
            expand(project.properties)
        }
    }
}

project("pim-clientfx") {
    apply plugin: "java-library"
    apply plugin: "org.springframework.boot"
    apply plugin: "org.openjfx.javafxplugin"
    description = "GUI for PIM"
    test.enabled = false
    dependencies {
        implementation(project(":pim-core"))
        implementation(project(":pim-server"))

        javafx {
            version = "$version_javafx"
            modules = ["javafx.controls", "javafx.fxml", "javafx.web"]
        }
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // The archive name. If the name has not been explicitly set, the pattern for the name is:
    // [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    // archiveFileName = "test2-boot.jar"
    springBoot {
        mainClass = "de.freese.pim.gui.PimClientLauncher"
    }
    // gradle bootRun --args="--spring.profiles.active=ClientStandalone"
    bootRun {
        args = [
                "--spring.profiles.active=ClientRest"
        ]
    }

    // For Placeholder in application.properties/application.yml
    ext.artifactId = project.name

    processResources {
        filesMatching("application-ClientEmbeddedServer.properties") {
            filteringCharset = "UTF-8"

            /// During Problems escape Placeholder: \${...}
            expand(project.properties)
        }
    }
}
